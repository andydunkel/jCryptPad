package daimanager.encryptiondialog;

import daimanager.DecryptPassword;
import daimanager.EncryptPassword;
import encryption.EncryptionWrapper;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * EncryptionDialog.java
 * 
 * Text editor with encryption functions
 * 
 * @author Andy Dunkel andy.dunkel"at"ekiwi.de
 * @author published under the terms and conditions of the
 *      GNU General Public License,
 *      for details see file gpl.txt in the distribution
 *      package of this software
 *
 */
public class EncryptionDialog extends javax.swing.JFrame {
    
    private boolean saved = false;
    private String savedFileName = "";
    
    
    /** Creates new form EncryptionDialog */
    public EncryptionDialog() {
        initComponents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        btNew = new javax.swing.JButton();
        btOpen = new javax.swing.JButton();
        btSave = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        btCut = new javax.swing.JButton();
        btCopy = new javax.swing.JButton();
        btPaste = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        btCrypt = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        btExit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        text = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        itemNew = new javax.swing.JMenuItem();
        itemOpen = new javax.swing.JMenuItem();
        itemSave = new javax.swing.JMenuItem();
        itemSaveAs = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        itemExit = new javax.swing.JMenuItem();
        mnuEdit = new javax.swing.JMenu();
        itemCut = new javax.swing.JMenuItem();
        itemCopy = new javax.swing.JMenuItem();
        itemPaste = new javax.swing.JMenuItem();
        mnuEncryption = new javax.swing.JMenu();
        itemEncryptData = new javax.swing.JMenuItem();
        itemDecryptData = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Text Encryption");

        jToolBar1.setRollover(true);

        btNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/tb_new.png"))); // NOI18N
        btNew.setFocusable(false);
        btNew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btNew.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNewActionPerformed(evt);
            }
        });
        jToolBar1.add(btNew);

        btOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/tb_open.png"))); // NOI18N
        btOpen.setFocusable(false);
        btOpen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btOpen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btOpenActionPerformed(evt);
            }
        });
        jToolBar1.add(btOpen);

        btSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/tb_save.png"))); // NOI18N
        btSave.setFocusable(false);
        btSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveActionPerformed(evt);
            }
        });
        jToolBar1.add(btSave);
        jToolBar1.add(jSeparator1);

        btCut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/cut16.png"))); // NOI18N
        btCut.setFocusable(false);
        btCut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btCut.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCutActionPerformed(evt);
            }
        });
        jToolBar1.add(btCut);

        btCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/copy16.png"))); // NOI18N
        btCopy.setFocusable(false);
        btCopy.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btCopy.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCopyActionPerformed(evt);
            }
        });
        jToolBar1.add(btCopy);

        btPaste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/paste16.png"))); // NOI18N
        btPaste.setFocusable(false);
        btPaste.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btPaste.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPasteActionPerformed(evt);
            }
        });
        jToolBar1.add(btPaste);
        jToolBar1.add(jSeparator2);

        btCrypt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/lock.png"))); // NOI18N
        btCrypt.setFocusable(false);
        btCrypt.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btCrypt.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btCrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCryptActionPerformed(evt);
            }
        });
        jToolBar1.add(btCrypt);
        jToolBar1.add(jSeparator3);

        btExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/exit.png"))); // NOI18N
        btExit.setFocusable(false);
        btExit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btExit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btExit);

        text.setColumns(20);
        text.setFont(new java.awt.Font("Courier New", 0, 11));
        text.setRows(5);
        jScrollPane1.setViewportView(text);

        mnuFile.setMnemonic('F');
        mnuFile.setText("File");

        itemNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        itemNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/tb_new.png"))); // NOI18N
        itemNew.setMnemonic('N');
        itemNew.setText("New");
        mnuFile.add(itemNew);

        itemOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        itemOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/tb_open.png"))); // NOI18N
        itemOpen.setMnemonic('O');
        itemOpen.setText("Open");
        mnuFile.add(itemOpen);

        itemSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        itemSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/tb_save.png"))); // NOI18N
        itemSave.setMnemonic('S');
        itemSave.setText("Save");
        mnuFile.add(itemSave);

        itemSaveAs.setText("Save as");
        itemSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileAs(evt);
            }
        });
        mnuFile.add(itemSaveAs);
        mnuFile.add(jSeparator4);

        itemExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.CTRL_MASK));
        itemExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/exit.png"))); // NOI18N
        itemExit.setMnemonic('e');
        itemExit.setText("Exit");
        mnuFile.add(itemExit);

        menuBar.add(mnuFile);

        mnuEdit.setMnemonic('E');
        mnuEdit.setText("Edit");

        itemCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        itemCut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/cut16.png"))); // NOI18N
        itemCut.setMnemonic('C');
        itemCut.setText("Cut");
        itemCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCutActionPerformed(evt);
            }
        });
        mnuEdit.add(itemCut);

        itemCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        itemCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/copy16.png"))); // NOI18N
        itemCopy.setMnemonic('o');
        itemCopy.setText("Copy");
        itemCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCopyActionPerformed(evt);
            }
        });
        mnuEdit.add(itemCopy);

        itemPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        itemPaste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/paste16.png"))); // NOI18N
        itemPaste.setMnemonic('P');
        itemPaste.setText("Paste");
        itemPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemPasteActionPerformed(evt);
            }
        });
        mnuEdit.add(itemPaste);

        menuBar.add(mnuEdit);

        mnuEncryption.setMnemonic('c');
        mnuEncryption.setText("Encryption");

        itemEncryptData.setMnemonic('E');
        itemEncryptData.setText("Encrypt Text");
        itemEncryptData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemEncryptDataActionPerformed(evt);
            }
        });
        mnuEncryption.add(itemEncryptData);

        itemDecryptData.setMnemonic('D');
        itemDecryptData.setText("Decrypt Data");
        itemDecryptData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemDecryptDataActionPerformed(evt);
            }
        });
        mnuEncryption.add(itemDecryptData);

        menuBar.add(mnuEncryption);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 577, Short.MAX_VALUE)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 577, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNewActionPerformed
        newFile();
    }//GEN-LAST:event_btNewActionPerformed

    private void btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveActionPerformed
        saveFileDlg(false);
    }//GEN-LAST:event_btSaveActionPerformed

    private void btOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btOpenActionPerformed
        loadFileDlg();
    }//GEN-LAST:event_btOpenActionPerformed

    private void saveFileAs(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileAs
        saveFileDlg(true);
    }//GEN-LAST:event_saveFileAs

    private void btCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCutActionPerformed
        text.cut();
    }//GEN-LAST:event_btCutActionPerformed

    private void btCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCopyActionPerformed
        text.copy();
    }//GEN-LAST:event_btCopyActionPerformed

    private void btPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPasteActionPerformed
        text.paste();
    }//GEN-LAST:event_btPasteActionPerformed

    private void itemCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCutActionPerformed
        text.cut();
    }//GEN-LAST:event_itemCutActionPerformed

    private void itemCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCopyActionPerformed
        text.copy();
    }//GEN-LAST:event_itemCopyActionPerformed

    private void itemPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemPasteActionPerformed
        text.paste();
    }//GEN-LAST:event_itemPasteActionPerformed

    private void btCryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCryptActionPerformed

        encryptText();
    }//GEN-LAST:event_btCryptActionPerformed

    private void itemDecryptDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemDecryptDataActionPerformed
        decryptText();
    }//GEN-LAST:event_itemDecryptDataActionPerformed

    private void itemEncryptDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemEncryptDataActionPerformed
        encryptText();
    }//GEN-LAST:event_itemEncryptDataActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EncryptionDialog().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCopy;
    private javax.swing.JButton btCrypt;
    private javax.swing.JButton btCut;
    private javax.swing.JButton btExit;
    private javax.swing.JButton btNew;
    private javax.swing.JButton btOpen;
    private javax.swing.JButton btPaste;
    private javax.swing.JButton btSave;
    private javax.swing.JMenuItem itemCopy;
    private javax.swing.JMenuItem itemCut;
    private javax.swing.JMenuItem itemDecryptData;
    private javax.swing.JMenuItem itemEncryptData;
    private javax.swing.JMenuItem itemExit;
    private javax.swing.JMenuItem itemNew;
    private javax.swing.JMenuItem itemOpen;
    private javax.swing.JMenuItem itemPaste;
    private javax.swing.JMenuItem itemSave;
    private javax.swing.JMenuItem itemSaveAs;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu mnuEdit;
    private javax.swing.JMenu mnuEncryption;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JTextArea text;
    // End of variables declaration//GEN-END:variables
    
    /**
     * New file
     */
    private void newFile()
    {
        int result = saveConfirmation();
        if (result != JOptionPane.CANCEL_OPTION)
        {
            saved = false;
            savedFileName = "";
            text.setText("");
        }
        
    }
    
    /**
     * Ask the if he wants to save the current file
     * @return
     */
    private int saveConfirmation()
    {
        int result = JOptionPane.showConfirmDialog(null, "Should the current file be saved?");
		
	if (result == JOptionPane.YES_OPTION)
        {
                saveFileDlg(false);
        }		

        return result;
    }
    
    /**
     * Save the current file, if the file was never saved before
     * a dialog is shown
     * 
     * @param showDlg = true for showing the FileChooser everytime
     */
    private void saveFileDlg(boolean showDlg)
    {
        int returnval;
        
        if ((saved == false) || (showDlg == true))
        {
            JFileChooser chooser = new JFileChooser();
	    FileNameExtensionFilter filter = new FileNameExtensionFilter("Text file", "txt");
	    
	    chooser.setFileFilter(filter);
            returnval = chooser.showSaveDialog(this);
	    
	    //user choosed a file
	    if(returnval == JFileChooser.APPROVE_OPTION) 
	    {		    	
               saveFile(chooser.getSelectedFile().getAbsolutePath());	    
            }
        } else
        {
            saveFile(savedFileName);
        }
     }    
    
    /**
     * Materilize file on hdd
     * @param filename
     */
    private void saveFile(String filename)
    {
        String writeText = text.getText();
        
        FileWriter f;
        
        try
        {
            f = new FileWriter(filename);
            f.write(writeText);
            f.close();
            
            saved = true;
            savedFileName = filename;
            
        } catch (IOException e)
        {
            JOptionPane.showMessageDialog(this, "Could not save the file!");
        }
    }
    
    /**
     * Actions for loading a file
     */
    private void loadFileDlg()
    {
        int result = saveConfirmation();
        if (result != JOptionPane.CANCEL_OPTION)
        {
            JFileChooser chooser = new JFileChooser();
	    FileNameExtensionFilter filter = new FileNameExtensionFilter("Text file", "txt", "etf");
	    
	    int returnVal = chooser.showOpenDialog(this);
	    
	    //User selected a file
	    if(returnVal == JFileChooser.APPROVE_OPTION) 
	    {
                loadFile(chooser.getSelectedFile().getAbsolutePath());
            }

        }        
    }
    
    /**
     * loads a materialized file
     * @param filename
     */
    private void loadFile(String filename)
    {
        String inputText = "";
        BufferedReader f;
        
        try
        {
           f = new BufferedReader(new FileReader(filename)); 
           String inputLine;
           
           while((inputLine = f.readLine()) != null) 
           {
                inputText += inputLine + "\n";
           }
           
           f.close();
           text.setText(inputText);
           
           saved = true;
           savedFileName = filename;
                   
        } catch (IOException e)
        {
            JOptionPane.showMessageDialog(this, "Could not load the file!");
        }
    }
    
    /**
     * Encrypt Text
     */
    private void encryptText()
    {
        EncryptPassword ep = new EncryptPassword(this,true);
        ep.setLocationByPlatform(true);
        ep.setVisible(true);
        
        if (ep.isModalResult() == true)
        {
            String pw = new String(ep.getEdtPw1().getPassword());
            
            try 
            {
                EncryptionWrapper w = new EncryptionWrapper();
                text.setText(w.encryptMessage(text.getText(), pw));
            } catch (Exception ex) 
            {
                Logger.getLogger(EncryptionDialog.class.getName()).log(Level.SEVERE, null, ex);
            }            
        }                
    }
    
    /**
     * DecryptText
     */
    private void decryptText()
    {
        DecryptPassword dp = new DecryptPassword(this, true);
        dp.setLocationByPlatform(true);
        dp.setVisible(true);
        
        if (dp.isModalResult() == true)
        {
            try {
                String pw = new String(dp.getEdtPassword().getPassword());
                EncryptionWrapper w = new EncryptionWrapper();

                text.setText(w.decryptMessage(text.getText(), pw));
            } catch (BadPaddingException ex)
            {
                JOptionPane.showMessageDialog(this, "Wrong password.");
            }
            catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            } 
            
        }
        
        
        
    }
}
